version: 2.0
jobs:

  test:
    docker:
      - image: circleci/python:3.6.8
    steps:
      - checkout
      - run:
          name: Create virtualenv with tox
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install tox
      - run:
          name: Run tests and flake8 using tox
          command: |
            source venv/bin/activate
            tox
      - run:
          name: Upload coverage data to codecov
          command: bash <(curl -s https://codecov.io/bash)

  release_pypi:
    docker:
      - image: circleci/python:3.6.8
    steps:
      - checkout
      - run:
          name: Build source distribution
          command: python setup.py sdist
      - run:
          name: Create virtualenv with twine
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install twine
      - run:
          name: Upload to PyPI
          command: |
            source venv/bin/activate
            twine upload dist/asyncy-${CIRCLE_TAG}.tar.gz

  release_brew:
    macos:
      xcode: "9.0"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8e:2f:db:cd:a7:a4:38:ca:c1:c3:8f:ef:fc:27:4a:93"
      - run:
          name: Install or re-link brew
          command: |
            if [ -d /usr/local/Cellar ]; then
              for i in `ls /usr/local/Cellar/`; do echo "Re-linking $i"; brew link --force $i; done
            else
              /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            fi
      - run:
          name: Upgrade Python
          command: brew upgrade python || echo "Python is already installed"
      - run:
          name: Install virtualenv
          command: pip3 install virtualenv
      - checkout
      - run:
          name: Change git name
          command: git config --global user.name "Asyncy Infrastructure"
      - run:
          name: Change git email
          command: git config --global user.email infra@asyncy.com
      - run:
          name: create brew pr
          command: bash ./scripts/update_brew.sh $CIRCLE_TAG

  release_snap:
    # Building and testing a snap can be tricky as snapd can't run inside a
    # container. To able to run and test our freshly build snap, we need to use
    # a `machine` executor. We use `edge` because, at time of writing, that is
    # the only version on which we got it to work.
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: Create snapcraft.yaml
          command: |
            echo "
            name: asyncy
            version: $CIRCLE_TAG
            summary: Asyncy CLI
            description: Asyncy CLI
            grade: devel
            confinement: strict
            base: core18

            apps:
              asyncy:
                command: bin/asyncy
                environment:
                  LANG: C.UTF-8
                  LC_ALL: C.UTF-8

            parts:
              asyncy:
                plugin: python
                python-version: python3
                python-packages:
                - asyncy==$CIRCLE_TAG
            " > snapcraft.yaml
      - run:
          name: Build snap
          # The machine executor runs a version of Ubuntu that doesn't have a
          # snapcraft package readily available. The docs of CircleCI suggest to
          # run from inside a standard container.
          # https://circleci.com/blog/build-test-publish-snap-packages/
          command: '
            docker run
              -v $(pwd):$(pwd)
              -t ubuntu:18.04
              sh -c "
                apt update -qq &&
                apt install snapcraft -y &&
                cd $(pwd) &&
                snapcraft
              "
            '
      - run:
          name: Install snapd
          # Even though our freshly build snap explicitly depends on the core18
          # base, snap complains about not being able to find said bases after
          # installing our snap. Therefore we install them explicitly.
          command: |
            sudo apt install -y snapd
            sudo snap install core
            sudo snap install core18
      - run:
          name: Install the freshly build snap
          command: '
            sudo snap install asyncy_${CIRCLE_TAG}_amd64.snap
              --dangerous
              --devmode
            '
      - run:
          name: Verify the installed snap's version
          # /snap/bin isn't on $PATH here, so we specify the absolute path
          command: /snap/bin/asyncy version | grep "Asyncy ${CIRCLE_TAG}"
      - run:
          name: Release snap
          # Just as during the build of the snap, we run snapcraft inside a
          # container.
          command: '
            docker run
              -v $(pwd):$(pwd)
              -t ubuntu:18.04
              sh -c "
                apt update -qq &&
                apt install snapcraft -y &&
                echo $SNAPCRAFT_LOGIN | snapcraft login --with - &&
                snapcraft push --release edge asyncy_${CIRCLE_TAG}_amd64.snap
              "
            '

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
      - release_pypi:
          requires:
            - test
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
      - release_snap:
          requires:
            - release_pypi
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
      - release_brew:
          requires:
            - release_pypi
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/
